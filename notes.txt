Magesh Kuppan

Methodology:
    No powerpoints
    100% hands on

Software:
    go.dev
    visual studio code

Repo:
    https://github.com/tkmagesh/adobe-go-jun-2022

Why Go?

    - C
~1980 - C++
1995 - Java
     - Python
2000 - .NET (C#)
     - Ruby

2010 - Go


    1. Better concurrency support
    2. Easy to start with
    3. Performance
    4. Scalability
    5. Compiled

    * Simplicity
        - 25 keywords
        - No access modifiers
        - No classes (Only structs)
        - No Inheritance (Only composition)
        - No exceptions (Only errors)
        - No pointer arithmetic
        - No reference types (everything is value type)
        - No implicity type conversion

    * Performance
        - Equivalent to C++
        - Compiled to native code
            - Cross platform compilation is possible

    * Concurrency
        - Go is built for concurrency
        - Concurrency features are built in the language
            go, chan (data type), <- (channel operator), select & range constructs
        - SDK APIs for concurrency (sync package)

Paradox of Choice - Barry Schwartz

Every go file must belong to a package
The starting point of the app is the 'main' function
The file that has the 'main' function must belong to 'main' package

Execute a program without build
    go run hello-world.go 

Build the program
    go build hello-world.go
    go build -o hw hello-world.go


Execute the build 
    ./hello-world

For cross platform compilation
    Refer : https://go.dev/doc/install/source#environment

    GOOS=windows GOARCH=386 go build hello-world.go 

    To set the go environment variables 
        go env -w GOARCH=386 GOOS=windows

Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real [float32] + imaginary [float32])
    complex128 (real [float64] + imaginary [float64])

    byte (alias for uint8)
    rune (alias for int32) (Unicode code point)

Programming Constructs (Control Flow)
    if
    for
    switch

Assingment:01
Build an interactive console calculator

    a. Display the following menu
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit

    b. If the user choice is 5, exit the program
    c. If the user choice is <1 or >5, 
            display an error message
            display the menu again

    d. If the user choice is 1 - 4
        get the two numbers from the user
        perform the operation
        display the result
        display the menu again

Functions
    Variadic functions
    Higher Order functions
        Functions as data / object
            a. Assign a function as a value to a variable
            b. Pass a function as an argument to another function
            c. Return a function as return values from another function

Assignment:02
    Refactor the solution for 'assignment:01' to use functions

Errors
    just values that represent an error
    Errors are not thrown (unlike Exceptions) but returned as values

Deferred Functions


Program
    Open the file
    defer Close the file

    while not EOF

        Read the line
        if error {
            log the error
            return
        }

        Parse the line
        if error {
            log the error
            return
        }

        Process the data
        if error {
            log the error
            return
        }

    Return the result

Collection Types
    Array
        Fixed size collection of data of the same type
        Values can be accessed using an index
        len -> length of the array

    Slice
        Dynamically sized collection of data of the same type
        Values can be accessed using an index
        
    Map
        Dynamically sized collection of key/value pairs


Before go 1.13
    $GOPATH
        /pkg
        /bin
        /src
            /github.com
                /tkmagesh
                    /adobe-go-jun-2022   


After go 1.13
    Support for modules were added (there by we have the freedom to organize our code anywhere in our system (not limited by the GOPATH folder))

    module file => go.mod
        module name
        target go version
        list of dependencies

    To create a module
        go mod init <module name>
            module name = repo path

    To run a module
        go run .

    to build a module
        go build .
        go build -o <output file> .

    to install a third party module
        go get <module name>
        go get github.com/fatih/color

        (by default, the source code of the thrid party modules are downloaded to the $GOPATH/pkg folder)

    to update the go.mod file (based on the usage of the modules)
        go mod tidy

    to localize the source code of the dependencies
        go mod vendor

    Other mod commands
        go mod graph
        go mod why

    Module command reference
        https://go.dev/ref/mod

Concurrency
    - NEVER EVER assume the time taken for a function to execute to synchronize the concurrent operations